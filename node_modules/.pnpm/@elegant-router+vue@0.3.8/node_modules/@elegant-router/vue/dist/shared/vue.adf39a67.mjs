import h from"node:path";import{createUnplugin as _}from"unplugin";import G,{splitRouterName as k,transformRouterNameToPath as j,PAGE_DEGREE_SPLITTER as w}from"@elegant-router/core";import{mkdir as V,writeFile as K}from"node:fs/promises";import{existsSync as x}from"node:fs";import{loadFile as W,generateCode as D}from"magicast";import{parse as U}from"recast/parsers/typescript.js";import{format as A}from"prettier";import{consola as X}from"consola";import{lightGreen as z}from"kolorist";import Y from"magic-string";function q(o,e){const t="src/typings/elegant-router.d.ts",r="src/router/elegant/imports.ts",u="src/router/elegant/routes.ts",n="src/router/elegant/transform.ts",s={root:"/","not-found":"/:pathMatch(.*)*"},l={base:"src/layouts/base-layout/index.vue",blank:"src/layouts/blank-layout/index.vue"},i={dtsDir:t,importsDir:r,lazyImport:c=>!0,constDir:u,customRoutes:{map:{},names:[]},layouts:l,defaultLayout:Object.keys(l)[0],layoutLazyImport:c=>!1,transformDir:n,onRouteMetaGen:c=>({title:c}),...o,...e};return i.customRoutes.map={...s,...i.customRoutes.map},i.layouts[i.defaultLayout]||(i.defaultLayout=Object.keys(i.layouts)[0]),i}async function E(o){x(o)||await V(h.dirname(o),{recursive:!0})}const g="layout.",d="view.",S="$";function P(o,e){const{map:t,names:r}=o.customRoutes,u=new Map,n=new Set,s=new Set;Object.entries(t||{}).forEach(([m,f])=>{const R=o.routeNameTransformer(m.toLocaleLowerCase()),v=o.routePathTransformer(R,f);u.has(R)||u.set(R,v),n.has(R)||n.add(R),s.has(R)||s.add(R)}),r?.forEach(m=>{const f=k(m);f.forEach((R,v)=>{const L=R.toLocaleLowerCase(),y=o.routeNameTransformer(L),M=o.routePathTransformer(y,j(L));u.has(y)||u.set(y,M),v===0&&(n.has(y)||n.add(y)),v===f.length-1&&(s.has(y)||s.add(y))})});const l=new Set(e.map(([m])=>m));function i(m){return l.has(m)}const c=Array.from(u.entries()).filter(([m])=>!i(m)),a=Array.from(n).filter(m=>!i(m)),p=Array.from(s).filter(m=>!i(m));return{entries:c,firstLevelRoutes:a,lastLevelRoutes:p}}function C(o=!0){const e=`/* eslint-disable */
/* prettier-ignore */
`;let t=`// Generated by elegant-router
// Read more: https://github.com/soybeanjs/elegant-router`;return o&&(t=e+t),t}async function B(o,e,t){if(o.length===0)return;const r=P(t,e),u=J(o,e,r,t.layouts),n=h.posix.join(t.cwd,t.dtsDir);try{await E(n)}catch{}await K(n,u)}function J(o,e,t,r){const{entries:u,firstLevelRoutes:n,lastLevelRoutes:s}=t,l=[...u,...e],i=e.filter(([p])=>p.split(w).length===1).map(([p])=>p),c=Object.keys(r);let a=`${C()}

declare module "@elegant-router/types" {
  type ElegantConstRoute = import('@elegant-router/vue').ElegantConstRoute;

  /**
   * route layout
   */
  export type RouteLayout = ${c.map(p=>`"${p}"`).join(" | ")};

  /**
   * route map
   */
  export type RouteMap = {`;return l.forEach(([p,m])=>{a+=`
    "${p}": "${m}";`}),a+=`
  };

  /**
   * route key
   */
  export type RouteKey = keyof RouteMap;

  /**
   * route path
   */
  export type RoutePath = RouteMap[RouteKey];

  /**
   * custom route key
   */
  export type CustomRouteKey = Extract<
    RouteKey,`,u.forEach(([p])=>{a+=`
    | "${p}"`}),a+=`
  >;

  /**
   * the generated route key
   */
  export type GeneratedRouteKey = Exclude<RouteKey, CustomRouteKey>;

  /**
   * the first level route key, which contain the layout of the route
   */
  export type FirstLevelRouteKey = Extract<
    RouteKey,`,i.forEach(p=>{a+=`
    | "${p}"`}),a+=`
  >;

  /**
   * the custom first level route key
   */
  export type CustomFirstLevelRouteKey = Extract<
    CustomRouteKey,`,n.forEach(p=>{a+=`
    | "${p}"`}),a+=`
  >;

  /**
   * the last level route key, which has the page file
   */
  export type LastLevelRouteKey = Extract<
    RouteKey,`,o.forEach(p=>{a+=`
    | "${p.routeName}"`}),a+=`
  >;

  /**
   * the custom last level route key
   */
  export type CustomLastLevelRouteKey = Extract<
    CustomRouteKey,`,s.forEach(p=>{a+=`
    | "${p}"`}),a+=`
  >;

  /**
   * the single level route key
   */
  export type SingleLevelRouteKey = FirstLevelRouteKey & LastLevelRouteKey;

  /**
   * the custom single level route key
   */
  export type CustomSingleLevelRouteKey = CustomFirstLevelRouteKey & CustomLastLevelRouteKey;

  /**
   * the first level route key, but not the single level
  */
  export type FirstLevelRouteNotSingleKey = Exclude<FirstLevelRouteKey, SingleLevelRouteKey>;

  /**
   * the custom first level route key, but not the single level
   */
  export type CustomFirstLevelRouteNotSingleKey = Exclude<CustomFirstLevelRouteKey, CustomSingleLevelRouteKey>;

  /**
   * the center level route key
   */
  export type CenterLevelRouteKey = Exclude<GeneratedRouteKey, FirstLevelRouteKey | LastLevelRouteKey>;

  /**
   * the custom center level route key
   */
  export type CustomCenterLevelRouteKey = Exclude<CustomRouteKey, CustomFirstLevelRouteKey | CustomLastLevelRouteKey>;

  /**
   * the center level route key
   */
  type GetChildRouteKey<K extends RouteKey, T extends RouteKey = RouteKey> = T extends \`\${K}_\${infer R}\`
    ? R extends \`\${string}_\${string}\`
      ? never
      : T
    : never;

  /**
   * the single level route
   */
  type SingleLevelRoute<K extends SingleLevelRouteKey = SingleLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: \`${g}\${RouteLayout}$${d}\${K}\`;
      }
    : never;

  /**
   * the last level route
   */
  type LastLevelRoute<K extends GeneratedRouteKey> = K extends LastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: \`${d}\${K}\`;
      }
    : never;
  
  /**
   * the center level route
   */
  type CenterLevelRoute<K extends GeneratedRouteKey> = K extends CenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the multi level route
   */
  type MultiLevelRoute<K extends FirstLevelRouteNotSingleKey = FirstLevelRouteNotSingleKey> = K extends string
    ? ElegantConstRoute & {
        name: K;
        path: RouteMap[K];
        component: \`${g}\${RouteLayout}\`;
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;
  
  /**
   * the custom first level route
   */
  type CustomSingleLevelRoute<K extends CustomFirstLevelRouteKey = CustomFirstLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: \`${g}\${RouteLayout}$${d}\${LastLevelRouteKey}\`;
      }
    : never;

  /**
   * the custom last level route
   */
  type CustomLastLevelRoute<K extends CustomRouteKey> = K extends CustomLastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: \`${d}\${LastLevelRouteKey}\`;
      }
    : never;

  /**
   * the custom center level route
   */
  type CustomCenterLevelRoute<K extends CustomRouteKey> = K extends CustomCenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the custom multi level route
   */
  type CustomMultiLevelRoute<K extends CustomFirstLevelRouteNotSingleKey = CustomFirstLevelRouteNotSingleKey> =
    K extends string
      ? ElegantConstRoute & {
          name: K;
          path: RouteMap[K];
          component: \`${g}\${RouteLayout}\`;
          children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
        }
      : never;

  /**
   * the custom route
   */
  type CustomRoute = CustomSingleLevelRoute | CustomMultiLevelRoute;

  /**
   * the generated route
   */
  type GeneratedRoute = SingleLevelRoute | MultiLevelRoute;

  /**
   * the elegant route
   */
  type ElegantRoute = GeneratedRoute | CustomRoute;
}
`,a}function Q(o,e){const t=ee(e),r=C();let u=`import type { RouteComponent } from "vue-router";
import type { LastLevelRouteKey, RouteLayout } from "@elegant-router/types";

`,n="export const layouts: Record<RouteLayout, RouteComponent | (() => Promise<RouteComponent>)> = {";t.forEach(l=>{const{layoutName:i,importPath:c}=l;if(e.layoutLazyImport(i))n+=`
  ${i}: () => import("${c}"),`;else{const a=`${i[0].toUpperCase()}${i.substring(1)}Layout`;u+=`import ${a} from "${l.importPath}";
`,n+=`
  ${i}: ${a},`}}),u+=`
`,n+=`
};
`;let s="export const views: Record<LastLevelRouteKey, RouteComponent | (() => Promise<RouteComponent>)> = {";return o.forEach(l=>{const i=e.lazyImport(l.routeName),c=l.routeName.includes("-")?`"${l.routeName}"`:l.routeName;if(i)s+=`
  ${c}: () => import("${l.importPath}"),`;else{const a=Z(l.routeName);u+=`import ${a} from "${l.importPath}";
`,s+=`
  ${c}${c===a?"":`: ${a}`},`}}),s+=`
};
`,`${r}

${u}${n}
${s}`}function Z(o){const e=/^\d+$/,t=/-[0-9|a-zA-Z]/g;let r=o;return e.test(o)&&(r=`_${o}`),r=r.replace(t,u=>{let n=u.replace("-","").toUpperCase();return e.test(n)&&(n=`_${n}`),n}),r}async function H(o,e){if(o.length===0)return;const t=h.posix.join(e.cwd,e.importsDir);await E(t);const r=Q(o,e);await K(t,r)}function ee(o){const{alias:e,layouts:t}=o;return Object.keys(t).map(r=>{let u=t[r];return Object.entries(e).some(([n,s])=>{const l=u.startsWith(s);return l&&(u=u.replace(s,n)),l}),{layoutName:r,importPath:u}})}async function te(o){return await A(o,{parser:"typescript",printWidth:120,tabWidth:2,useTabs:!1,semi:!0,singleQuote:!0,quoteProps:"as-needed",jsxSingleQuote:!1,trailingComma:"none",bracketSpacing:!0,bracketSameLine:!1,arrowParens:"avoid",rangeStart:0,rangeEnd:Number.POSITIVE_INFINITY,requirePragma:!1,insertPragma:!1,proseWrap:"preserve",htmlWhitespaceSensitivity:"ignore",vueIndentScriptAndStyle:!1,endOfLine:"lf",embeddedLanguageFormatting:"auto",singleAttributePerLine:!1})}async function oe(o,e){const{cwd:t,constDir:r}=e,u=h.posix.join(t,r),n=await ne(o,e);await K(u,n,"utf8")}async function ne(o,e){const{cwd:t,constDir:r}=e,u=h.posix.join(t,r);if(!x(u)){const a=await re();await K(u,a,"utf-8")}const n=await W(u,{parser:{parse:U}}),s=o.map(a=>ae(a,e)),l=JSON.parse(JSON.stringify(n.exports.generatedRoutes)),i=N(l,s,e);n.exports.generatedRoutes=i;let{code:c}=D(n);return c=se(c),(await te(c)).replace(/,\n\n/g,`,
`)}async function re(){return`${C()}

import type { GeneratedRoute } from '@elegant-router/types';

export const generatedRoutes: GeneratedRoute[] = [];

`}function N(o,e,t){const r=ue(o);return e.map(u=>{const n=r.get(u.name);if(!n)return u;const{name:s,path:l,component:i,children:c,meta:a,...p}=u,m={...n,path:l},f=!s.includes(w)&&!c?.length;if(n.component&&i)if(f){const{layoutName:R}=b(n.component),{layoutName:v}=b(i),L=t.layouts[R]?R:v,y=u.name;m.component=O(y,L)}else{const R=n.component.startsWith(d),v=n.component.startsWith(g),L=n.component.replace(g,""),y=!!t.layouts[L];(R||v&&!y)&&(m.component=i)}return F(m,p),!m.meta&&a&&(m.meta=a),m.meta&&a&&F(m.meta,a),c?.length&&(m.children=N(n?.children||[],c,t)),m})}function F(o,e){Object.keys(e).forEach(t=>{o[t]||Object.assign(o,{[t]:e[t]})})}function ue(o){const e=new Map;function t(r){r.forEach(u=>{const{name:n,children:s}=u;e.set(n,u),s?.length&&t(s)})}return t(o),e}function ae(o,e){const{defaultLayout:t,onRouteMetaGen:r}=e,{routeName:u,routePath:n,children:s=[]}=o,l=`${g}${t}`,i=O(u,t),c=s.length>0,a={name:u,path:n,component:c?l:i};return n.includes(":")&&(a.props=!0),a.meta=r(u),c&&(a.children=s.map(p=>T(p,e))),a}function T(o,e){const{onRouteMetaGen:t}=e,{routeName:r,routePath:u,children:n=[]}=o,s=`${d}${r}`,l=n.length>0,i={name:r,path:u};if(!l)i.component=s,i.meta=t(r);else{i.meta=t(r);const c=n.map(a=>T(a,e));i.children=c}return i}function O(o,e){return`${g}${e}${S}${d}${o}`}function b(o){const[e,t]=o.split(S);return{layoutName:e.replace(g,""),viewName:t.replace(d,"")}}function se(o){const e=/"component":\s*"(.*?)"/g;return o.replace(e,t=>{const[r,u]=t.split(":");return`${r}: ${u.replace(/"/g,"")}`})}async function ie(o,e){const t=le(o,e),r=h.posix.join(o.cwd,o.transformDir);await E(r),await K(r,t)}function le(o,e){const t=C(),{entries:r}=P(o,e),u=[...r,...e];return`${t}

import type { RouteRecordRaw, RouteComponent } from 'vue-router';
import type { ElegantConstRoute } from '@elegant-router/vue';
import type { RouteMap, RouteKey, RoutePath } from '@elegant-router/types';

/**
 * transform elegant const routes to vue routes
 * @param routes elegant const routes
 * @param layouts layout components
 * @param views view components
 */
export function transformElegantRoutesToVueRoutes(
  routes: ElegantConstRoute[],
  layouts: Record<string, RouteComponent | (() => Promise<RouteComponent>)>,
  views: Record<string, RouteComponent | (() => Promise<RouteComponent>)>
) {
  return routes.flatMap(route => transformElegantRouteToVueRoute(route, layouts, views));
}

/**
 * transform elegant route to vue route
 * @param route elegant const route
 * @param layouts layout components
 * @param views view components
 */
function transformElegantRouteToVueRoute(
  route: ElegantConstRoute,
  layouts: Record<string, RouteComponent | (() => Promise<RouteComponent>)>,
  views: Record<string, RouteComponent | (() => Promise<RouteComponent>)>
) {
  const LAYOUT_PREFIX = 'layout.';
  const VIEW_PREFIX = 'view.';
  const ROUTE_DEGREE_SPLITTER = '_';
  const FIRST_LEVEL_ROUTE_COMPONENT_SPLIT = '$';

  function isLayout(component: string) {
    return component.startsWith(LAYOUT_PREFIX);
  }

  function getLayoutName(component: string) {
    const layout = component.replace(LAYOUT_PREFIX, '');

    if(!layouts[layout]) {
      throw new Error(\`Layout component "\${layout}" not found\`);
    }

    return layout;
  }

  function isView(component: string) {
    return component.startsWith(VIEW_PREFIX);
  }

  function getViewName(component: string) {
    const view = component.replace(VIEW_PREFIX, '');

    if(!views[view]) {
      throw new Error(\`View component "\${view}" not found\`);
    }

    return view;
  }

  function isFirstLevelRoute(item: ElegantConstRoute) {
    return !item.name.includes(ROUTE_DEGREE_SPLITTER);
  }

  function isSingleLevelRoute(item: ElegantConstRoute) {
    return isFirstLevelRoute(item) && !item.children?.length;
  }

  function getSingleLevelRouteComponent(component: string) {
    const [layout, view] = component.split(FIRST_LEVEL_ROUTE_COMPONENT_SPLIT);

    return {
      layout: getLayoutName(layout),
      view: getViewName(view)
    };
  }

  const vueRoutes: RouteRecordRaw[] = [];

  // add props: true to route
  if (route.path.includes(':') && !route.props) {
    route.props = true;
  }

  const { name, path, component, children, ...rest } = route;

  const vueRoute = { name, path, ...rest } as RouteRecordRaw;

  try {
    if (component) {
      if (isSingleLevelRoute(route)) {
        const { layout, view } = getSingleLevelRouteComponent(component);

        const singleLevelRoute: RouteRecordRaw = {
          path,
          component: layouts[layout],
          meta: {
            title: route.meta?.title || ''
          },
          children: [
            {
              name,
              path: '',
              component: views[view],
              ...rest
            } as RouteRecordRaw
          ]
        };

        return [singleLevelRoute];
      }

      if (isLayout(component)) {
        const layoutName = getLayoutName(component);

        vueRoute.component = layouts[layoutName];
      }

      if (isView(component)) {
        const viewName = getViewName(component);

        vueRoute.component = views[viewName];
      }

    }
  } catch (error: any) {
    console.error(\`Error transforming route "\${route.name}": \${error.toString()}\`);
    return [];
  }

  // add redirect to child
  if (children?.length && !vueRoute.redirect) {
    vueRoute.redirect = {
      name: children[0].name
    };
  }

  if (children?.length) {
    const childRoutes = children.flatMap(child => transformElegantRouteToVueRoute(child, layouts, views));

    if(isFirstLevelRoute(route)) {
      vueRoute.children = childRoutes;
    } else {
      vueRoutes.push(...childRoutes);
    }
  }

  vueRoutes.unshift(vueRoute);

  return vueRoutes;
}

/**
 * map of route name and route path
 */
const routeMap: RouteMap = {
  ${u.map(([n,s])=>`"${n}": "${s}"`).join(`,
  `)}
};

/**
 * get route path by route name
 * @param name route name
 */
export function getRoutePath<T extends RouteKey>(name: T) {
  return routeMap[name];
}

/**
 * get route name by route path
 * @param path route path
 */
export function getRouteName(path: RoutePath) {
  const routeEntries = Object.entries(routeMap) as [RouteKey, RoutePath][];

  const routeName: RouteKey | null = routeEntries.find(([, routePath]) => routePath === path)?.[0] || null;

  return routeName;
}
`}function I(o,e,t=!0){t&&X[e](`${z("[elegant-router]")} ${o}`)}var ce=Object.defineProperty,me=(o,e,t)=>e in o?ce(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t,$=(o,e,t)=>(me(o,typeof e!="symbol"?e+"":e,t),t);class pe{constructor(e={}){$(this,"options"),$(this,"elegantRouter"),$(this,"viteServer"),this.elegantRouter=new G(e),this.options=q(this.elegantRouter.options,e),this.generate()}scanPages(){this.elegantRouter.scanPages()}setupFSWatcher(){this.elegantRouter.setupFSWatcher(async()=>{I("The pages changed, regenerating the dts file and routes...","info",this.options.log),await this.generate(),I("The dts file and routes have been regenerated successfully","success",this.options.log),this.reloadViteServer()})}stopFSWatcher(){this.elegantRouter.stopFSWatcher()}setViteServer(e){this.viteServer=e}reloadViteServer(){this.viteServer?.ws?.send({type:"full-reload",path:"*"})}async generate(){const{files:e,entries:t,trees:r}=this.elegantRouter;ie(this.options,t),await B(e,t,this.options),await H(e,this.options),await oe(r,this.options)}}function Re(o,e,t){if(!/<script.*setup.*>/.test(o))return null;const r=new Y(o),u=/<script[\s\S]*?>/,n=/defineOptions\(\{[^}]+?\}\)/,s=/(?<=name:\s*['|"])\w+(?=['|"])/;return n.test(r.toString())?r.replace(n,l=>l.replace(s,()=>t)):r.replace(u,l=>`${l}
defineOptions({
  name: "${t}"
});
`),{map:r.generateMap(),code:r.toString()}}const ye=_((o,e)=>{const t=new pe(o);return[{name:"@elegant-router/vue",enforce:"pre",vite:{apply:"serve",configResolved(){t.setupFSWatcher()},configureServer(r){t.setViteServer(r)}}},{name:"@elegant-router/inject-name",enforce:"pre",transformInclude(r){const{cwd:u,pageDir:n}=t.elegantRouter.options;if(!r.startsWith(h.posix.join(u,n)))return null;const s=h.posix.join(u,n),l=r.replace(`${s}/`,"");return t.elegantRouter.isMatchPageGlob(l)},transform(r,u){const{cwd:n,pageDir:s}=t.elegantRouter.options,l=h.posix.join(n,s),i=u.replace(`${l}/`,""),{routeName:c}=t.elegantRouter.getRouterFileByGlob(i);return Re(r,u,c)}}]});export{ye as u};
