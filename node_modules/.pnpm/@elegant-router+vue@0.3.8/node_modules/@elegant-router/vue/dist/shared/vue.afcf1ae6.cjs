"use strict";const i=require("node:path"),unplugin=require("unplugin"),l$1=require("@elegant-router/core"),promises=require("node:fs/promises"),node_fs=require("node:fs"),magicast=require("magicast"),typescript_js=require("recast/parsers/typescript.js"),prettier=require("prettier"),consola=require("consola"),kolorist=require("kolorist"),a$1=require("magic-string");function _interopDefaultCompat(e){return e&&typeof e=="object"&&"default"in e?e.default:e}const i__default=_interopDefaultCompat(i),l__default=_interopDefaultCompat(l$1),a__default=_interopDefaultCompat(a$1);function createPluginOptions(e,t){const r="src/typings/elegant-router.d.ts",p="src/router/elegant/imports.ts",m="src/router/elegant/routes.ts",s="src/router/elegant/transform.ts",y={root:"/","not-found":"/:pathMatch(.*)*"},v={base:"src/layouts/base-layout/index.vue",blank:"src/layouts/blank-layout/index.vue"},h={dtsDir:r,importsDir:p,lazyImport:L=>!0,constDir:m,customRoutes:{map:{},names:[]},layouts:v,defaultLayout:Object.keys(v)[0],layoutLazyImport:L=>!1,transformDir:s,onRouteMetaGen:L=>({title:L}),...e,...t};return h.customRoutes.map={...y,...h.customRoutes.map},h.layouts[h.defaultLayout]||(h.defaultLayout=Object.keys(h.layouts)[0]),h}async function ensureFile(e){node_fs.existsSync(e)||await promises.mkdir(i__default.dirname(e),{recursive:!0})}const LAYOUT_PREFIX="layout.",VIEW_PREFIX="view.",FIRST_LEVEL_ROUTE_COMPONENT_SPLIT="$";function getCustomRouteConfig(e,t){const{map:r,names:p}=e.customRoutes,m=new Map,s=new Set,y=new Set;Object.entries(r||{}).forEach(([K,F])=>{const E=e.routeNameTransformer(K.toLocaleLowerCase()),S=e.routePathTransformer(E,F);m.has(E)||m.set(E,S),s.has(E)||s.add(E),y.has(E)||y.add(E)}),p?.forEach(K=>{const F=l$1.splitRouterName(K);F.forEach((E,S)=>{const T=E.toLocaleLowerCase(),$=e.routeNameTransformer(T),_=e.routePathTransformer($,l$1.transformRouterNameToPath(T));m.has($)||m.set($,_),S===0&&(s.has($)||s.add($)),S===F.length-1&&(y.has($)||y.add($))})});const v=new Set(t.map(([K])=>K));function h(K){return v.has(K)}const L=Array.from(m.entries()).filter(([K])=>!h(K)),R=Array.from(s).filter(K=>!h(K)),C=Array.from(y).filter(K=>!h(K));return{entries:L,firstLevelRoutes:R,lastLevelRoutes:C}}function createPrefixCommentOfGenFile(e=!0){const t=`/* eslint-disable */
/* prettier-ignore */
`;let r=`// Generated by elegant-router
// Read more: https://github.com/soybeanjs/elegant-router`;return e&&(r=t+r),r}async function genDtsFile(e,t,r){if(e.length===0)return;const p=getCustomRouteConfig(r,t),m=d(e,t,p,r.layouts),s=i__default.posix.join(r.cwd,r.dtsDir);try{await ensureFile(s)}catch{}await promises.writeFile(s,m)}function d(e,t,r,p){const{entries:m,firstLevelRoutes:s,lastLevelRoutes:y}=r,v=[...m,...t],h=t.filter(([C])=>C.split(l$1.PAGE_DEGREE_SPLITTER).length===1).map(([C])=>C),L=Object.keys(p);let R=`${createPrefixCommentOfGenFile()}

declare module "@elegant-router/types" {
  type ElegantConstRoute = import('@elegant-router/vue').ElegantConstRoute;

  /**
   * route layout
   */
  export type RouteLayout = ${L.map(C=>`"${C}"`).join(" | ")};

  /**
   * route map
   */
  export type RouteMap = {`;return v.forEach(([C,K])=>{R+=`
    "${C}": "${K}";`}),R+=`
  };

  /**
   * route key
   */
  export type RouteKey = keyof RouteMap;

  /**
   * route path
   */
  export type RoutePath = RouteMap[RouteKey];

  /**
   * custom route key
   */
  export type CustomRouteKey = Extract<
    RouteKey,`,m.forEach(([C])=>{R+=`
    | "${C}"`}),R+=`
  >;

  /**
   * the generated route key
   */
  export type GeneratedRouteKey = Exclude<RouteKey, CustomRouteKey>;

  /**
   * the first level route key, which contain the layout of the route
   */
  export type FirstLevelRouteKey = Extract<
    RouteKey,`,h.forEach(C=>{R+=`
    | "${C}"`}),R+=`
  >;

  /**
   * the custom first level route key
   */
  export type CustomFirstLevelRouteKey = Extract<
    CustomRouteKey,`,s.forEach(C=>{R+=`
    | "${C}"`}),R+=`
  >;

  /**
   * the last level route key, which has the page file
   */
  export type LastLevelRouteKey = Extract<
    RouteKey,`,e.forEach(C=>{R+=`
    | "${C.routeName}"`}),R+=`
  >;

  /**
   * the custom last level route key
   */
  export type CustomLastLevelRouteKey = Extract<
    CustomRouteKey,`,y.forEach(C=>{R+=`
    | "${C}"`}),R+=`
  >;

  /**
   * the single level route key
   */
  export type SingleLevelRouteKey = FirstLevelRouteKey & LastLevelRouteKey;

  /**
   * the custom single level route key
   */
  export type CustomSingleLevelRouteKey = CustomFirstLevelRouteKey & CustomLastLevelRouteKey;

  /**
   * the first level route key, but not the single level
  */
  export type FirstLevelRouteNotSingleKey = Exclude<FirstLevelRouteKey, SingleLevelRouteKey>;

  /**
   * the custom first level route key, but not the single level
   */
  export type CustomFirstLevelRouteNotSingleKey = Exclude<CustomFirstLevelRouteKey, CustomSingleLevelRouteKey>;

  /**
   * the center level route key
   */
  export type CenterLevelRouteKey = Exclude<GeneratedRouteKey, FirstLevelRouteKey | LastLevelRouteKey>;

  /**
   * the custom center level route key
   */
  export type CustomCenterLevelRouteKey = Exclude<CustomRouteKey, CustomFirstLevelRouteKey | CustomLastLevelRouteKey>;

  /**
   * the center level route key
   */
  type GetChildRouteKey<K extends RouteKey, T extends RouteKey = RouteKey> = T extends \`\${K}_\${infer R}\`
    ? R extends \`\${string}_\${string}\`
      ? never
      : T
    : never;

  /**
   * the single level route
   */
  type SingleLevelRoute<K extends SingleLevelRouteKey = SingleLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: \`${LAYOUT_PREFIX}\${RouteLayout}$${VIEW_PREFIX}\${K}\`;
      }
    : never;

  /**
   * the last level route
   */
  type LastLevelRoute<K extends GeneratedRouteKey> = K extends LastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: \`${VIEW_PREFIX}\${K}\`;
      }
    : never;
  
  /**
   * the center level route
   */
  type CenterLevelRoute<K extends GeneratedRouteKey> = K extends CenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the multi level route
   */
  type MultiLevelRoute<K extends FirstLevelRouteNotSingleKey = FirstLevelRouteNotSingleKey> = K extends string
    ? ElegantConstRoute & {
        name: K;
        path: RouteMap[K];
        component: \`${LAYOUT_PREFIX}\${RouteLayout}\`;
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;
  
  /**
   * the custom first level route
   */
  type CustomSingleLevelRoute<K extends CustomFirstLevelRouteKey = CustomFirstLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: \`${LAYOUT_PREFIX}\${RouteLayout}$${VIEW_PREFIX}\${LastLevelRouteKey}\`;
      }
    : never;

  /**
   * the custom last level route
   */
  type CustomLastLevelRoute<K extends CustomRouteKey> = K extends CustomLastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: \`${VIEW_PREFIX}\${LastLevelRouteKey}\`;
      }
    : never;

  /**
   * the custom center level route
   */
  type CustomCenterLevelRoute<K extends CustomRouteKey> = K extends CustomCenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the custom multi level route
   */
  type CustomMultiLevelRoute<K extends CustomFirstLevelRouteNotSingleKey = CustomFirstLevelRouteNotSingleKey> =
    K extends string
      ? ElegantConstRoute & {
          name: K;
          path: RouteMap[K];
          component: \`${LAYOUT_PREFIX}\${RouteLayout}\`;
          children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
        }
      : never;

  /**
   * the custom route
   */
  type CustomRoute = CustomSingleLevelRoute | CustomMultiLevelRoute;

  /**
   * the generated route
   */
  type GeneratedRoute = SingleLevelRoute | MultiLevelRoute;

  /**
   * the elegant route
   */
  type ElegantRoute = GeneratedRoute | CustomRoute;
}
`,R}function g(e,t){const r=getLayoutFile(t),p=createPrefixCommentOfGenFile();let m=`import type { RouteComponent } from "vue-router";
import type { LastLevelRouteKey, RouteLayout } from "@elegant-router/types";

`,s="export const layouts: Record<RouteLayout, RouteComponent | (() => Promise<RouteComponent>)> = {";r.forEach(v=>{const{layoutName:h,importPath:L}=v;if(t.layoutLazyImport(h))s+=`
  ${h}: () => import("${L}"),`;else{const R=`${h[0].toUpperCase()}${h.substring(1)}Layout`;m+=`import ${R} from "${v.importPath}";
`,s+=`
  ${h}: ${R},`}}),m+=`
`,s+=`
};
`;let y="export const views: Record<LastLevelRouteKey, RouteComponent | (() => Promise<RouteComponent>)> = {";return e.forEach(v=>{const h=t.lazyImport(v.routeName),L=v.routeName.includes("-")?`"${v.routeName}"`:v.routeName;if(h)y+=`
  ${L}: () => import("${v.importPath}"),`;else{const R=f(v.routeName);m+=`import ${R} from "${v.importPath}";
`,y+=`
  ${L}${L===R?"":`: ${R}`},`}}),y+=`
};
`,`${p}

${m}${s}
${y}`}function f(e){const t=/^\d+$/,r=/-[0-9|a-zA-Z]/g;let p=e;return t.test(e)&&(p=`_${e}`),p=p.replace(r,m=>{let s=m.replace("-","").toUpperCase();return t.test(s)&&(s=`_${s}`),s}),p}async function genImportsFile(e,t){if(e.length===0)return;const r=i__default.posix.join(t.cwd,t.importsDir);await ensureFile(r);const p=g(e,t);await promises.writeFile(r,p)}function getLayoutFile(e){const{alias:t,layouts:r}=e;return Object.keys(r).map(p=>{let m=r[p];return Object.entries(t).some(([s,y])=>{const v=m.startsWith(y);return v&&(m=m.replace(y,s)),v}),{layoutName:p,importPath:m}})}async function formatCode(e){return await prettier.format(e,{parser:"typescript",printWidth:120,tabWidth:2,useTabs:!1,semi:!0,singleQuote:!0,quoteProps:"as-needed",jsxSingleQuote:!1,trailingComma:"none",bracketSpacing:!0,bracketSameLine:!1,arrowParens:"avoid",rangeStart:0,rangeEnd:Number.POSITIVE_INFINITY,requirePragma:!1,insertPragma:!1,proseWrap:"preserve",htmlWhitespaceSensitivity:"ignore",vueIndentScriptAndStyle:!1,endOfLine:"lf",embeddedLanguageFormatting:"auto",singleAttributePerLine:!1})}async function genConstFile(e,t){const{cwd:r,constDir:p}=t,m=i__default.posix.join(r,p),s=await j(e,t);await promises.writeFile(m,s,"utf8")}async function j(e,t){const{cwd:r,constDir:p}=t,m=i__default.posix.join(r,p);if(!node_fs.existsSync(m)){const R=await b();await promises.writeFile(m,R,"utf-8")}const s=await magicast.loadFile(m,{parser:{parse:typescript_js.parse}}),y=e.map(R=>B(R,t)),v=JSON.parse(JSON.stringify(s.exports.generatedRoutes)),h=N(v,y,t);s.exports.generatedRoutes=h;let{code:L}=magicast.generateCode(s);return L=D(L),(await formatCode(L)).replace(/,\n\n/g,`,
`)}async function b(){return`${createPrefixCommentOfGenFile()}

import type { GeneratedRoute } from '@elegant-router/types';

export const generatedRoutes: GeneratedRoute[] = [];

`}function N(e,t,r){const p=k(e);return t.map(m=>{const s=p.get(m.name);if(!s)return m;const{name:y,path:v,component:h,children:L,meta:R,...C}=m,K={...s,path:v},F=!y.includes(l$1.PAGE_DEGREE_SPLITTER)&&!L?.length;if(s.component&&h)if(F){const{layoutName:E}=P(s.component),{layoutName:S}=P(h),T=r.layouts[E]?E:S,$=m.name;K.component=x($,T)}else{const E=s.component.startsWith(VIEW_PREFIX),S=s.component.startsWith(LAYOUT_PREFIX),T=s.component.replace(LAYOUT_PREFIX,""),$=!!r.layouts[T];(E||S&&!$)&&(K.component=h)}return O(K,C),!K.meta&&R&&(K.meta=R),K.meta&&R&&O(K.meta,R),L?.length&&(K.children=N(s?.children||[],L,r)),K})}function O(e,t){Object.keys(t).forEach(r=>{e[r]||Object.assign(e,{[r]:t[r]})})}function k(e){const t=new Map;function r(p){p.forEach(m=>{const{name:s,children:y}=m;t.set(s,m),y?.length&&r(y)})}return r(e),t}function B(e,t){const{defaultLayout:r,onRouteMetaGen:p}=t,{routeName:m,routePath:s,children:y=[]}=e,v=`${LAYOUT_PREFIX}${r}`,h=x(m,r),L=y.length>0,R={name:m,path:s,component:L?v:h};return s.includes(":")&&(R.props=!0),R.meta=p(m),L&&(R.children=y.map(C=>w(C,t))),R}function w(e,t){const{onRouteMetaGen:r}=t,{routeName:p,routePath:m,children:s=[]}=e,y=`${VIEW_PREFIX}${p}`,v=s.length>0,h={name:p,path:m};if(!v)h.component=y,h.meta=r(p);else{h.meta=r(p);const L=s.map(R=>w(R,t));h.children=L}return h}function x(e,t){return`${LAYOUT_PREFIX}${t}${FIRST_LEVEL_ROUTE_COMPONENT_SPLIT}${VIEW_PREFIX}${e}`}function P(e){const[t,r]=e.split(FIRST_LEVEL_ROUTE_COMPONENT_SPLIT);return{layoutName:t.replace(LAYOUT_PREFIX,""),viewName:r.replace(VIEW_PREFIX,"")}}function D(e){const t=/"component":\s*"(.*?)"/g;return e.replace(t,r=>{const[p,m]=r.split(":");return`${p}: ${m.replace(/"/g,"")}`})}async function genTransformFile(e,t){const r=l(e,t),p=i__default.posix.join(e.cwd,e.transformDir);await ensureFile(p),await promises.writeFile(p,r)}function l(e,t){const r=createPrefixCommentOfGenFile(),{entries:p}=getCustomRouteConfig(e,t),m=[...p,...t];return`${r}

import type { RouteRecordRaw, RouteComponent } from 'vue-router';
import type { ElegantConstRoute } from '@elegant-router/vue';
import type { RouteMap, RouteKey, RoutePath } from '@elegant-router/types';

/**
 * transform elegant const routes to vue routes
 * @param routes elegant const routes
 * @param layouts layout components
 * @param views view components
 */
export function transformElegantRoutesToVueRoutes(
  routes: ElegantConstRoute[],
  layouts: Record<string, RouteComponent | (() => Promise<RouteComponent>)>,
  views: Record<string, RouteComponent | (() => Promise<RouteComponent>)>
) {
  return routes.flatMap(route => transformElegantRouteToVueRoute(route, layouts, views));
}

/**
 * transform elegant route to vue route
 * @param route elegant const route
 * @param layouts layout components
 * @param views view components
 */
function transformElegantRouteToVueRoute(
  route: ElegantConstRoute,
  layouts: Record<string, RouteComponent | (() => Promise<RouteComponent>)>,
  views: Record<string, RouteComponent | (() => Promise<RouteComponent>)>
) {
  const LAYOUT_PREFIX = 'layout.';
  const VIEW_PREFIX = 'view.';
  const ROUTE_DEGREE_SPLITTER = '_';
  const FIRST_LEVEL_ROUTE_COMPONENT_SPLIT = '$';

  function isLayout(component: string) {
    return component.startsWith(LAYOUT_PREFIX);
  }

  function getLayoutName(component: string) {
    const layout = component.replace(LAYOUT_PREFIX, '');

    if(!layouts[layout]) {
      throw new Error(\`Layout component "\${layout}" not found\`);
    }

    return layout;
  }

  function isView(component: string) {
    return component.startsWith(VIEW_PREFIX);
  }

  function getViewName(component: string) {
    const view = component.replace(VIEW_PREFIX, '');

    if(!views[view]) {
      throw new Error(\`View component "\${view}" not found\`);
    }

    return view;
  }

  function isFirstLevelRoute(item: ElegantConstRoute) {
    return !item.name.includes(ROUTE_DEGREE_SPLITTER);
  }

  function isSingleLevelRoute(item: ElegantConstRoute) {
    return isFirstLevelRoute(item) && !item.children?.length;
  }

  function getSingleLevelRouteComponent(component: string) {
    const [layout, view] = component.split(FIRST_LEVEL_ROUTE_COMPONENT_SPLIT);

    return {
      layout: getLayoutName(layout),
      view: getViewName(view)
    };
  }

  const vueRoutes: RouteRecordRaw[] = [];

  // add props: true to route
  if (route.path.includes(':') && !route.props) {
    route.props = true;
  }

  const { name, path, component, children, ...rest } = route;

  const vueRoute = { name, path, ...rest } as RouteRecordRaw;

  try {
    if (component) {
      if (isSingleLevelRoute(route)) {
        const { layout, view } = getSingleLevelRouteComponent(component);

        const singleLevelRoute: RouteRecordRaw = {
          path,
          component: layouts[layout],
          meta: {
            title: route.meta?.title || ''
          },
          children: [
            {
              name,
              path: '',
              component: views[view],
              ...rest
            } as RouteRecordRaw
          ]
        };

        return [singleLevelRoute];
      }

      if (isLayout(component)) {
        const layoutName = getLayoutName(component);

        vueRoute.component = layouts[layoutName];
      }

      if (isView(component)) {
        const viewName = getViewName(component);

        vueRoute.component = views[viewName];
      }

    }
  } catch (error: any) {
    console.error(\`Error transforming route "\${route.name}": \${error.toString()}\`);
    return [];
  }

  // add redirect to child
  if (children?.length && !vueRoute.redirect) {
    vueRoute.redirect = {
      name: children[0].name
    };
  }

  if (children?.length) {
    const childRoutes = children.flatMap(child => transformElegantRouteToVueRoute(child, layouts, views));

    if(isFirstLevelRoute(route)) {
      vueRoute.children = childRoutes;
    } else {
      vueRoutes.push(...childRoutes);
    }
  }

  vueRoutes.unshift(vueRoute);

  return vueRoutes;
}

/**
 * map of route name and route path
 */
const routeMap: RouteMap = {
  ${m.map(([s,y])=>`"${s}": "${y}"`).join(`,
  `)}
};

/**
 * get route path by route name
 * @param name route name
 */
export function getRoutePath<T extends RouteKey>(name: T) {
  return routeMap[name];
}

/**
 * get route name by route path
 * @param path route path
 */
export function getRouteName(path: RoutePath) {
  const routeEntries = Object.entries(routeMap) as [RouteKey, RoutePath][];

  const routeName: RouteKey | null = routeEntries.find(([, routePath]) => routePath === path)?.[0] || null;

  return routeName;
}
`}function log(e,t,r=!0){r&&consola.consola[t](`${kolorist.lightGreen("[elegant-router]")} ${e}`)}var n=Object.defineProperty,a=(e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,o=(e,t,r)=>(a(e,typeof t!="symbol"?t+"":t,r),r);class c{constructor(t={}){o(this,"options"),o(this,"elegantRouter"),o(this,"viteServer"),this.elegantRouter=new l__default(t),this.options=createPluginOptions(this.elegantRouter.options,t),this.generate()}scanPages(){this.elegantRouter.scanPages()}setupFSWatcher(){this.elegantRouter.setupFSWatcher(async()=>{log("The pages changed, regenerating the dts file and routes...","info",this.options.log),await this.generate(),log("The dts file and routes have been regenerated successfully","success",this.options.log),this.reloadViteServer()})}stopFSWatcher(){this.elegantRouter.stopFSWatcher()}setViteServer(t){this.viteServer=t}reloadViteServer(){this.viteServer?.ws?.send({type:"full-reload",path:"*"})}async generate(){const{files:t,entries:r,trees:p}=this.elegantRouter;genTransformFile(this.options,r),await genDtsFile(t,r,this.options),await genImportsFile(t,this.options),await genConstFile(p,this.options)}}function setRouteNamePageFile(e,t,r){if(!/<script.*setup.*>/.test(e))return null;const p=new a__default(e),m=/<script[\s\S]*?>/,s=/defineOptions\(\{[^}]+?\}\)/,y=/(?<=name:\s*['|"])\w+(?=['|"])/;return s.test(p.toString())?p.replace(s,v=>v.replace(y,()=>r)):p.replace(m,v=>`${v}
defineOptions({
  name: "${r}"
});
`),{map:p.generateMap(),code:p.toString()}}const u=unplugin.createUnplugin((e,t)=>{const r=new c(e);return[{name:"@elegant-router/vue",enforce:"pre",vite:{apply:"serve",configResolved(){r.setupFSWatcher()},configureServer(p){r.setViteServer(p)}}},{name:"@elegant-router/inject-name",enforce:"pre",transformInclude(p){const{cwd:m,pageDir:s}=r.elegantRouter.options;if(!p.startsWith(i__default.posix.join(m,s)))return null;const y=i__default.posix.join(m,s),v=p.replace(`${y}/`,"");return r.elegantRouter.isMatchPageGlob(v)},transform(p,m){const{cwd:s,pageDir:y}=r.elegantRouter.options,v=i__default.posix.join(s,y),h=m.replace(`${v}/`,""),{routeName:L}=r.elegantRouter.getRouterFileByGlob(h);return setRouteNamePageFile(p,m,L)}}]});exports.u=u;
